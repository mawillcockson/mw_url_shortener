[tool.poetry]
name = "mw_url_shortener"
version = "0.0.7-alpha.1"
description = "A URL shortener API webserver"
authors = ["Matthew Willcockson <matthew@willcockson.family>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/mawillcockson/mw_url_shortener"

[tool.poetry.dependencies]
python = ">=3.10.0,<3.11"
importlib-metadata = {version = ">=4.8.1", python = "<3.8"}
platformdirs = ">=2.4.0"
SQLAlchemy = {version = ">=1.4.25", extras = ["mypy"]}
aiosqlite = ">=0.17.0"
pydantic = {version = ">=1.8.2", extras = ["email", "dotenv"]}
typer = ">=0.4.0"
passlib = {version = ">=1.7.4", extras = ["bcrypt"]}
Inject = "^4.3.1"
httpx = "^0.21.1"

### server requirements
fastapi = ">=0.62.0"
hypercorn = "^0.13.2"
python-jose = {version = ">=3.2.0", extras = ["cryptography"]}
python-dateutil = ">=2.8.1"
python-multipart = ">=0.0.5,<0.0.6"
itsdangerous = ">=1.1.0,<3.0.0"
orjson = ">=3.2.1"
# NOTE:FUTURE windows support
# https://github.com/MagicStack/uvloop/issues/14
uvloop = {version = ">=0.16.0", markers = "sys_platform != 'win32' and sys_platform != 'cygwin' and sys_platform != 'cli'"}

# NOTE::future split out server as a pip extra
# [tool.poetry.extras]
# server = ["fastapi[all]>=0.62.0", "python-dateutil>=2.8.1", "python-jose>=3.2.0", "python-dotenv>=0.15.0"]

[tool.poetry.dev-dependencies]
pytest = ">=6.2.0"
pytest-cov = ">=2.10.1"
black = ">=20.8b1"
mypy = ">=0.790"
isort = ">=5.6.4"
# Faker = ">=5.0.1"
pytest-timeout = ">=1.4.2"
tox = ">=3.24.4"
pylint = ">=2.11.1"
anyio = ">=3.3.4" # provides pytest.mark.anyio decorator for async test function support
requests = ">=2.24.0,<3.0.0" # starlette.testclient.TestClient
PySnooper = "^1.1.0"

[tool.poetry.scripts]
mw-redir = "mw_url_shortener.cli.entry_point:main"
mw-redir-server = "mw_url_shortener.server.cli:app"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
minversion = "6.2.0" # First version to have easily accessible types
# --strict-markers catches things like @pytest.mark.parameterize (should be "parametrize")
addopts = "--cov=mw_url_shortener --strict-markers"
# I don't plan on leaving parametersets empty
# https://docs.pytest.org/en/stable/reference.html#confval-empty_parameter_set_mark
empty_parameter_set_mark = "fail_at_collect"
log_cli = true
timeout = 240
markers = ["local", "remote"]

[tool.isort]
profile = "black"
# Ensures the output doesn't save if the resulting file contains syntax errors
atomic = true
# Add an explicitly defined source path (modules within src paths have their
# imports automatically catorgorized as first_party)
src_paths = ["mw_url_shortener", "tests"]
# # https://pycqa.github.io/isort/docs/configuration/options.html#extend-skip-glob
# extend_skip_glob = ["mw_url_shortener/client/*"]

[tool.black]
# to ignore files, use:
# extend_exclude = "mw_url_shortener/client"

[tool.mypy]
files = ["mw_url_shortener", "tests"]
# to ignore files, use
# exclude = "client"  # is an re-module regex
strict = true
##### enabled by strict in v0.790
# # Warn about unused '[mypy-<pattern>]' config sections
# warn_unused_configs = true
# # Disallow usage of generic types that do not specify explicit type parameters
# disallow_any_generics = true
# # Disallow subclassing values of type 'Any' when defining classes
# disallow_subclassing_any = true
# # Disallow calling functions without type annotations from functions with type annotations
# disallow_untyped_calls = true
# # Disallow defining functions without type annotations or with incomplete type annotations
# disallow_untyped_defs = true
# # Disallow defining functions with incomplete type annotations (inverse: --allow-incomplete-defs)
# disallow_incomplete_defs = true
# # Type check the interior of functions without type annotations
# check_untyped_defs = true
# # Disallow decorating typed functions with untyped decorators
# disallow_untyped_decorators = true
# # Don't assume arguments with default values of None are Optional
# no_implicit_optional = true
# # Warn about casting an expression to its inferred type
# # Don't cast something that's already an appropriate type
# warn_redundant_casts = true
# # Warn about unneeded '# type: ignore' comments
# warn_unused_ignores = true
# # Warn about returning values of type Any from non- Any typed functions
# warn_return_any = true
# # Treat imports as private unless aliased
# no_implicit_reexport = true
# # Prohibit equality, identity, and container checks for non-overlapping types
# strict_equality = true
#####

### Configuring warnings
# Warn about statements or expressions inferred to be unreachable or redundant
warn_unreachable = true
# Warn about functions that end without returning
# Must explicitly specify return type -> NoReturn
warn_no_return = false
### Configuring warnings

# Support namespace packages (PEP 420, __init__.py-less)
# Allow typechecking single-file scripts
namespace_packages = true
# Cache previous checking results
incremental = true
# Pull type information about imports, but don't complain if it's missing
ignore_missing_imports = true
follow_imports = "silent"

### Don't allow working with non-specific types
# Disallow Any types resulting from unfollowed imports
disallow_any_unimported = true
# Disallow all expressions that have type Any
disallow_any_expr = true
# Disallow functions that have Any in their signature after decorator transformation
disallow_any_decorated = true
# Disallow explicit Any in type positions
disallow_any_explicit = true
### Don't allow working with non-specific types

# Everything must be typed, or inferable
disallow_untyped_globals = true
strict_optional = true
# Don't let us forget about # type: ignore
warn_unused_ignores = true
warn_return_any = true
# A variable can be reassigned, but it's type can't be changed
disallow_redefinition = true

### Configuring error messages
# Precede errors with "note:" messages explaining context
show_error_context = true
# Show column numbers in error messages
show_column_numbers = true
# Show error codes in error messages
show_error_codes = true
# Use visually nicer output in error messages: Use soft word wrap, show source
# code snippets, and show error location markers
pretty = true
# Do not colorize error messages
color_output = true
# Do not show error stats summary
error_summary = true
# Show absolute paths to files
show_absolute_path = true
### Configuring error messages

plugins = [
    # NOTE::FUTURE support for pyproject.toml configuration is in this PR:
    # https://github.com/samuelcolvin/pydantic/pull/2908
    # without it, the pydantic.mypy plugin cannot read this file
    # "pydantic.mypy",
    "sqlalchemy.ext.mypy.plugin",
]

[[tool.mypy.overrides]]
module = ["tests.conftest", "tests.*.conftest"]
# NOTE:TYPES @pytest.fixture contains Any
allow_any_expr = true

[[tool.mypy.overrides]]
module = ["tests.*"]
# NOTE:TYPES many uses of pydantic.BaseModel and typer.testing.CliRunner have Any
allow_any_expr = true

# NOTE::FUTURE add mypy plugin configuration when syntax is available
# [pydantic-mypy]
# warn_required_dynamic_aliases = true
# warn_untyped_fields = true
